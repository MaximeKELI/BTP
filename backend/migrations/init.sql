-- Initialisation de la base de données BTP Multi-Sector
-- Ce script crée toutes les tables nécessaires

-- Activer l'extension PostGIS
CREATE EXTENSION IF NOT EXISTS postgis;

-- Table des utilisateurs
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(120) UNIQUE NOT NULL,
    phone VARCHAR(20) UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    username VARCHAR(50) UNIQUE,
    is_verified BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMP,
    role VARCHAR(20) DEFAULT 'client',
    device_token TEXT,
    platform VARCHAR(20),
    app_version VARCHAR(20),
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table des profils utilisateur
CREATE TABLE IF NOT EXISTS user_profiles (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    bio TEXT,
    avatar_url TEXT,
    birth_date DATE,
    gender VARCHAR(20),
    company VARCHAR(100),
    job_title VARCHAR(100),
    experience_years INTEGER,
    skills TEXT,
    certifications TEXT,
    email_notifications BOOLEAN DEFAULT TRUE,
    push_notifications BOOLEAN DEFAULT TRUE,
    sms_notifications BOOLEAN DEFAULT FALSE,
    language VARCHAR(10) DEFAULT 'fr',
    timezone VARCHAR(50) DEFAULT 'UTC',
    currency VARCHAR(3) DEFAULT 'XOF',
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table des secteurs utilisateur
CREATE TABLE IF NOT EXISTS user_sectors (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    sector VARCHAR(20) NOT NULL,
    specialization VARCHAR(100),
    experience_level VARCHAR(20),
    hourly_rate DECIMAL(10,2),
    availability VARCHAR(20),
    service_radius INTEGER DEFAULT 50,
    is_available BOOLEAN DEFAULT TRUE,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tables BTP
CREATE TABLE IF NOT EXISTS chantiers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    client_name VARCHAR(100),
    client_contact VARCHAR(100),
    project_type VARCHAR(100),
    budget DECIMAL(15,2),
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    status VARCHAR(20) DEFAULT 'planned',
    progress_percentage INTEGER DEFAULT 0,
    estimated_completion TIMESTAMP,
    manager_id INTEGER REFERENCES users(id),
    team_size INTEGER DEFAULT 0,
    weather_conditions TEXT,
    safety_notes TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS equipes (
    id SERIAL PRIMARY KEY,
    chantier_id INTEGER REFERENCES chantiers(id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    role VARCHAR(100) NOT NULL,
    hourly_rate DECIMAL(10,2),
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    hours_worked DECIMAL(8,2) DEFAULT 0,
    is_present BOOLEAN DEFAULT FALSE,
    last_checkin TIMESTAMP,
    last_checkout TIMESTAMP,
    performance_rating INTEGER,
    notes TEXT,
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS materiels (
    id SERIAL PRIMARY KEY,
    chantier_id INTEGER REFERENCES chantiers(id) ON DELETE SET NULL,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    brand VARCHAR(100),
    model VARCHAR(100),
    serial_number VARCHAR(100),
    quantity DECIMAL(10,2),
    unit VARCHAR(20),
    unit_price DECIMAL(10,2),
    total_cost DECIMAL(15,2),
    condition VARCHAR(50),
    status VARCHAR(50),
    supplier VARCHAR(100),
    purchase_date TIMESTAMP,
    warranty_expiry TIMESTAMP,
    last_maintenance TIMESTAMP,
    next_maintenance TIMESTAMP,
    maintenance_notes TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS photo_chantiers (
    id SERIAL PRIMARY KEY,
    chantier_id INTEGER REFERENCES chantiers(id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    filename VARCHAR(255) NOT NULL,
    original_filename VARCHAR(255) NOT NULL,
    file_path TEXT NOT NULL,
    file_size INTEGER,
    mime_type VARCHAR(100),
    title VARCHAR(200),
    description TEXT,
    category VARCHAR(100),
    tags TEXT,
    width INTEGER,
    height INTEGER,
    camera_make VARCHAR(100),
    camera_model VARCHAR(100),
    taken_at TIMESTAMP,
    work_phase VARCHAR(100),
    progress_milestone VARCHAR(100),
    is_before_photo BOOLEAN DEFAULT FALSE,
    is_after_photo BOOLEAN DEFAULT FALSE,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tables Agribusiness
CREATE TABLE IF NOT EXISTS parcelles (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    area_hectares DECIMAL(10,4) NOT NULL,
    soil_type VARCHAR(100),
    crop_type VARCHAR(100),
    variety VARCHAR(100),
    planting_date DATE,
    expected_harvest_date DATE,
    status VARCHAR(20) DEFAULT 'preparation',
    irrigation_system VARCHAR(100),
    fertilizer_type VARCHAR(100),
    last_fertilization DATE,
    last_irrigation TIMESTAMP,
    climate_zone VARCHAR(100),
    rainfall_mm DECIMAL(8,2),
    temperature_avg DECIMAL(5,2),
    expected_yield DECIMAL(10,2),
    yield_unit VARCHAR(20),
    market_price DECIMAL(10,2),
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS capteurs (
    id SERIAL PRIMARY KEY,
    parcelle_id INTEGER REFERENCES parcelles(id) ON DELETE CASCADE,
    name VARCHAR(200) NOT NULL,
    type VARCHAR(20) NOT NULL,
    model VARCHAR(100),
    serial_number VARCHAR(100),
    installation_date TIMESTAMP,
    battery_level INTEGER,
    is_active BOOLEAN DEFAULT TRUE,
    calibration_date TIMESTAMP,
    calibration_notes TEXT,
    min_value DECIMAL(10,4),
    max_value DECIMAL(10,4),
    reading_frequency INTEGER DEFAULT 60,
    last_reading TIMESTAMP,
    last_value DECIMAL(10,4),
    unit VARCHAR(20),
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS recoltes (
    id SERIAL PRIMARY KEY,
    parcelle_id INTEGER REFERENCES parcelles(id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    harvest_date DATE NOT NULL,
    quantity DECIMAL(10,2) NOT NULL,
    unit VARCHAR(20) NOT NULL,
    quality_grade VARCHAR(20),
    moisture_content DECIMAL(5,2),
    protein_content DECIMAL(5,2),
    other_quality_metrics TEXT,
    market_price DECIMAL(10,2),
    total_value DECIMAL(15,2),
    buyer VARCHAR(100),
    sale_date DATE,
    storage_location VARCHAR(200),
    processing_method VARCHAR(100),
    packaging_type VARCHAR(100),
    notes TEXT,
    weather_conditions TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS produits (
    id SERIAL PRIMARY KEY,
    seller_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    variety VARCHAR(100),
    price_per_unit DECIMAL(10,2) NOT NULL,
    unit VARCHAR(20) NOT NULL,
    min_quantity DECIMAL(10,2),
    max_quantity DECIMAL(10,2),
    available_quantity DECIMAL(10,2) NOT NULL,
    quality_grade VARCHAR(20),
    organic_certified BOOLEAN DEFAULT FALSE,
    certification_number VARCHAR(100),
    harvest_date DATE,
    expiry_date DATE,
    is_available BOOLEAN DEFAULT TRUE,
    featured BOOLEAN DEFAULT FALSE,
    views_count INTEGER DEFAULT 0,
    orders_count INTEGER DEFAULT 0,
    image_urls TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tables Mining
CREATE TABLE IF NOT EXISTS gisements (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    company_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    mineral_type VARCHAR(100) NOT NULL,
    deposit_type VARCHAR(100),
    status VARCHAR(20) DEFAULT 'exploration',
    estimated_reserves DECIMAL(15,2),
    reserves_unit VARCHAR(20),
    ore_grade DECIMAL(8,4),
    depth_meters DECIMAL(10,2),
    daily_production DECIMAL(10,2),
    monthly_production DECIMAL(10,2),
    annual_production DECIMAL(10,2),
    production_unit VARCHAR(20),
    environmental_impact TEXT,
    reclamation_plan TEXT,
    water_usage DECIMAL(10,2),
    energy_consumption DECIMAL(10,2),
    safety_rating INTEGER,
    compliance_score INTEGER,
    last_inspection TIMESTAMP,
    next_inspection TIMESTAMP,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS vehicules (
    id SERIAL PRIMARY KEY,
    gisement_id INTEGER REFERENCES gisements(id) ON DELETE SET NULL,
    name VARCHAR(200) NOT NULL,
    type VARCHAR(20) NOT NULL,
    brand VARCHAR(100),
    model VARCHAR(100),
    year INTEGER,
    serial_number VARCHAR(100),
    license_plate VARCHAR(50),
    capacity DECIMAL(10,2),
    capacity_unit VARCHAR(20),
    fuel_type VARCHAR(50),
    fuel_consumption DECIMAL(8,2),
    engine_power DECIMAL(8,2),
    status VARCHAR(50),
    condition VARCHAR(50),
    last_maintenance TIMESTAMP,
    next_maintenance TIMESTAMP,
    maintenance_hours DECIMAL(8,2) DEFAULT 0,
    current_operator_id INTEGER REFERENCES users(id),
    daily_usage_hours DECIMAL(8,2) DEFAULT 0,
    total_usage_hours DECIMAL(10,2) DEFAULT 0,
    safety_inspection_due TIMESTAMP,
    insurance_expiry DATE,
    registration_expiry DATE,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS productions (
    id SERIAL PRIMARY KEY,
    gisement_id INTEGER REFERENCES gisements(id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    production_date DATE NOT NULL,
    shift VARCHAR(20),
    quantity DECIMAL(10,2) NOT NULL,
    unit VARCHAR(20) NOT NULL,
    ore_grade DECIMAL(8,4),
    moisture_content DECIMAL(5,2),
    impurities DECIMAL(5,2),
    quality_grade VARCHAR(20),
    extraction_method VARCHAR(100),
    processing_method VARCHAR(100),
    equipment_used TEXT,
    water_used DECIMAL(10,2),
    energy_consumed DECIMAL(10,2),
    waste_generated DECIMAL(10,2),
    emissions DECIMAL(10,2),
    production_cost DECIMAL(15,2),
    market_value DECIMAL(15,2),
    profit_margin DECIMAL(5,2),
    notes TEXT,
    weather_conditions TEXT,
    safety_incidents TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS incidents (
    id SERIAL PRIMARY KEY,
    gisement_id INTEGER REFERENCES gisements(id) ON DELETE SET NULL,
    reporter_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    incident_date TIMESTAMP NOT NULL,
    severity VARCHAR(20) NOT NULL,
    incident_type VARCHAR(100),
    category VARCHAR(100),
    subcategory VARCHAR(100),
    people_involved TEXT,
    injured_count INTEGER DEFAULT 0,
    fatalities_count INTEGER DEFAULT 0,
    immediate_response TEXT,
    investigation_required BOOLEAN DEFAULT FALSE,
    investigation_status VARCHAR(50),
    corrective_actions TEXT,
    preventive_measures TEXT,
    resolution_date TIMESTAMP,
    resolution_notes TEXT,
    lessons_learned TEXT,
    regulatory_notification BOOLEAN DEFAULT FALSE,
    notification_date TIMESTAMP,
    regulatory_response TEXT,
    media_files TEXT,
    witness_statements TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Tables Divers
CREATE TABLE IF NOT EXISTS clients (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    contact_person VARCHAR(100),
    email VARCHAR(120),
    phone VARCHAR(20),
    website VARCHAR(200),
    client_type VARCHAR(20) NOT NULL,
    industry VARCHAR(100),
    company_size VARCHAR(50),
    tax_number VARCHAR(50),
    registration_number VARCHAR(50),
    credit_limit DECIMAL(15,2),
    payment_terms VARCHAR(100),
    preferred_payment_method VARCHAR(50),
    currency VARCHAR(3) DEFAULT 'XOF',
    account_manager_id INTEGER REFERENCES users(id),
    client_since DATE,
    last_contact TIMESTAMP,
    total_projects INTEGER DEFAULT 0,
    total_value DECIMAL(15,2) DEFAULT 0,
    communication_preferences TEXT,
    special_requirements TEXT,
    notes TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    risk_level VARCHAR(20),
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS projets (
    id SERIAL PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
    manager_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    project_type VARCHAR(100),
    sector VARCHAR(100),
    status VARCHAR(20) DEFAULT 'planning',
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    estimated_duration_days INTEGER,
    actual_duration_days INTEGER,
    budget DECIMAL(15,2),
    actual_cost DECIMAL(15,2),
    hourly_rate DECIMAL(10,2),
    currency VARCHAR(3) DEFAULT 'XOF',
    progress_percentage INTEGER DEFAULT 0,
    milestones TEXT,
    deliverables TEXT,
    team_members TEXT,
    required_skills TEXT,
    equipment_needed TEXT,
    quality_rating INTEGER,
    client_satisfaction INTEGER,
    completion_notes TEXT,
    latitude FLOAT,
    longitude FLOAT,
    address TEXT,
    city VARCHAR(100),
    country VARCHAR(100),
    postal_code VARCHAR(20),
    location GEOMETRY(POINT, 4326),
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS factures (
    id SERIAL PRIMARY KEY,
    client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
    projet_id INTEGER REFERENCES projets(id) ON DELETE SET NULL,
    created_by_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    invoice_number VARCHAR(100) UNIQUE NOT NULL,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    status VARCHAR(20) DEFAULT 'draft',
    invoice_date DATE NOT NULL,
    due_date DATE,
    sent_date TIMESTAMP,
    paid_date TIMESTAMP,
    subtotal DECIMAL(15,2) NOT NULL,
    tax_rate DECIMAL(5,2),
    tax_amount DECIMAL(15,2),
    discount_rate DECIMAL(5,2),
    discount_amount DECIMAL(15,2),
    total_amount DECIMAL(15,2) NOT NULL,
    paid_amount DECIMAL(15,2) DEFAULT 0,
    balance_due DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'XOF',
    payment_terms VARCHAR(100),
    late_fee_rate DECIMAL(5,2),
    late_fee_amount DECIMAL(15,2),
    line_items TEXT,
    notes TEXT,
    terms_conditions TEXT,
    attachments TEXT,
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS paiements (
    id SERIAL PRIMARY KEY,
    facture_id INTEGER REFERENCES factures(id) ON DELETE CASCADE,
    client_id INTEGER REFERENCES clients(id) ON DELETE CASCADE,
    processed_by_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    payment_number VARCHAR(100) UNIQUE NOT NULL,
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'XOF',
    payment_date TIMESTAMP NOT NULL,
    method VARCHAR(20) NOT NULL,
    reference_number VARCHAR(100),
    bank_name VARCHAR(100),
    account_number VARCHAR(100),
    mobile_money_provider VARCHAR(100),
    card_last_four VARCHAR(4),
    card_type VARCHAR(50),
    status VARCHAR(50),
    processing_fee DECIMAL(10,2),
    exchange_rate DECIMAL(10,6),
    notes TEXT,
    bank_reconciliation_date TIMESTAMP,
    reconciled_by_id INTEGER REFERENCES users(id),
    reconciliation_notes TEXT,
    metadata JSONB,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Créer les index pour améliorer les performances
CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
CREATE INDEX IF NOT EXISTS idx_users_phone ON users(phone);
CREATE INDEX IF NOT EXISTS idx_users_location ON users USING GIST(location);
CREATE INDEX IF NOT EXISTS idx_chantiers_location ON chantiers USING GIST(location);
CREATE INDEX IF NOT EXISTS idx_parcelles_location ON parcelles USING GIST(location);
CREATE INDEX IF NOT EXISTS idx_gisements_location ON gisements USING GIST(location);
CREATE INDEX IF NOT EXISTS idx_projets_location ON projets USING GIST(location);

-- Créer les triggers pour mettre à jour updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Appliquer le trigger à toutes les tables
DO $$
DECLARE
    t text;
BEGIN
    FOR t IN 
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('users', 'user_profiles', 'user_sectors', 'chantiers', 'equipes', 'materiels', 'photo_chantiers', 'parcelles', 'capteurs', 'recoltes', 'produits', 'gisements', 'vehicules', 'productions', 'incidents', 'clients', 'projets', 'factures', 'paiements')
    LOOP
        EXECUTE format('CREATE TRIGGER update_%s_updated_at BEFORE UPDATE ON %I FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()', t, t);
    END LOOP;
END;
$$ language 'plpgsql';

-- Insérer des données de test
INSERT INTO users (email, password_hash, first_name, last_name, role, is_verified) VALUES
('admin@btp.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8QzKz2', 'Admin', 'System', 'admin', true),
('manager@btp.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8QzKz2', 'Manager', 'Test', 'manager', true),
('worker@btp.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/8QzKz2', 'Worker', 'Test', 'worker', true);

-- Créer les profils pour les utilisateurs de test
INSERT INTO user_profiles (user_id, bio, company, job_title, experience_years) VALUES
(1, 'Administrateur système', 'BTP Multi-Sector', 'Administrateur', 5),
(2, 'Manager de projet', 'BTP Multi-Sector', 'Chef de projet', 3),
(3, 'Ouvrier spécialisé', 'BTP Multi-Sector', 'Ouvrier', 2);

COMMIT;

